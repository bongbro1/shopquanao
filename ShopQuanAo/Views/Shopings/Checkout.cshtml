@using System.Security.Claims
@inject ShopQuanAo.Areas.Admin.Controllers.ICartService _cartService;
@inject ShopQuanAo.Controllers.IProductService _productService;
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@inject IHttpContextAccessor HttpContextAccessor
@using cart = ShopQuanAo.Areas.Admin.Models.cart;
@using product = ShopQuanAo.Areas.Admin.Models.product;

@{
	ViewData["Title"] = "Checkout";
	Layout = "~/Views/Shared/_Layout.cshtml";
	List<cart> listCart = new List<cart>();
	product product = new product();
	if (User.Identity.IsAuthenticated)
	{
		int userId = int.Parse(User.FindFirstValue("Id"));
		foreach (var cartId in ViewBag.CartIdList)
		{
			var cart = _cartService.getCartById(int.Parse(cartId));
			listCart.Add(cart);
		}
	}
	double sumTotalPrice = (double)listCart.Sum(cart => cart.Total);
}
<div class="container">
	<div class="row">
		<div class="col-12">
			<div class="checkoutLayout">
				<div class="returnCart">
					<h1>List Product in Cart</h1>
					<div class="list">
						@foreach (var cart in listCart)
						{
							product = _productService.getProductById(cart.ProductId);
							string[] images = product.Images.Split(", ");
							<div class="item">
								<img src="~/images/@images[0]">
								<div class="info">
									<div class="name">@product.Name</div>
									<div class="price">@String.Format("${0:#,##0.00}", product.Price)/1 product</div>
								</div>
								<div class="quantity">@cart.Quantity</div>
								<div class="returnPrice">@String.Format("${0:#,##0.00}", cart.Total)</div>
							</div>
						}

					</div>
				</div>

				<input type="hidden" name="total_Price" value="@(sumTotalPrice + sumTotalPrice * 0.1)" />
				<form class="right" asp-controller="shopings" asp-action="checkout" method="post">
					<h1 class="text-center">Checkout</h1>

					<div class="form">
						<div class="group">
							<label for="name">Full Name</label>
							<input type="text" name="Fullname" id="name" placeholder="Full Name">
						</div>

						<div class="group">
							<label for="phone">Phone Number</label>
							<input type="text" name="Phone" id="phone" placeholder="Phone Number">
						</div>

						<div class="group">
							<label for="address">Address</label>
							<input type="text" name="Specific_address" id="address" placeholder="Address">
						</div>

						<div class="group">
							<label for="country">Country</label>
							<select id="country" class="js_country_address" name="Country" asp-items="ViewBag.Countries" onchange="showStatesAdress()">
								<option value="0">Select a country...</option>
							</select>
						</div>
						<div class="group">
							<label for="state">State</label>
							<select id="state" class="js_state_address" name="State" onchange="showCitiesAdress()">
								<option value="0">Select a state...</option>
							</select>
						</div>
						<div class="group">
							<label for="country">City</label>
							<select id="country" class="js_city_address" name="City">
								<option value="0">Select city...</option>
							</select>
						</div>

					</div>
					<div class="return">
						<div class="row">
							<div>SubTotal:</div>
							<div class="totalQuantity">@String.Format("${0:#,##0.00}", sumTotalPrice)</div>
						</div>
						<div class="row">
							<div>VAT:</div>
							<div class="totalQuantity">@String.Format("${0:#,##0.00}", sumTotalPrice*0.1)</div>
						</div>
						<div class="row">
							<div>Total Price:</div>
							<div class="totalPrice">@String.Format("${0:#,##0.00}", sumTotalPrice + sumTotalPrice * 0.1)</div>
							<input type="hidden" name="total_Price" value="@(sumTotalPrice + sumTotalPrice * 0.1)" />
						</div>
					</div>
					<button type="submit" class="buttonCheckout">CHECKOUT</button>
				</form>
			</div>
		</div>
	</div>
</div>


<style>
	body {
		font-family: monospace;
		overflow-x: hidden;
		font-synthesis: 15px;
	}

	a {
		text-decoration: none;
	}

	.container {
		width: 1200px;
		margin: auto;
		max-width: 90%;
		transition: transform 1s;
	}

	header img {
		width: 60px;
	}

	header {
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

		header .iconCart {
			position: relative;
			z-index: 1;
		}

		header .totalQuantity {
			position: absolute;
			top: 0;
			right: 0;
			font-size: x-large;
			background-color: #b31010;
			width: 40px;
			height: 40px;
			color: #fff;
			font-weight: bold;
			display: flex;
			justify-content: center;
			align-items: center;
			border-radius: 50%;
			transform: translateX(20px);
		}

	.listProduct {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 20px;
	}

		.listProduct .item img {
			width: 100%;
			height: 430px;
			object-fit: cover;
		}

		.listProduct .item {
			position: relative;
		}

			.listProduct .item h2 {
				font-weight: 700;
				font-size: x-large;
			}

			.listProduct .item .price {
				font-size: x-large;
			}

			.listProduct .item button {
				position: absolute;
				top: 50%;
				left: 50%;
				background-color: #e6572c;
				color: #fff;
				width: 50%;
				border: none;
				padding: 20px 30px;
				box-shadow: 0 10px 50px #000;
				cursor: pointer;
				transform: translateX(-50%) translateY(100px);
				opacity: 0;
			}

			.listProduct .item:hover button {
				transition: 0.5s;
				opacity: 1;
				transform: translateX(-50%) translateY(0);
			}

	.cart {
		color: #fff;
		position: fixed;
		width: 400px;
		max-width: 80vw;
		height: 100vh;
		background-color: #0E0F11;
		top: 0px;
		right: -100%;
		display: grid;
		grid-template-rows: 50px 1fr 50px;
		gap: 20px;
		transition: right 1s;
	}

		.cart .buttons .checkout {
			background-color: #E8BC0E;
			color: #000;
		}

		.cart h2 {
			color: #E8BC0E;
			padding: 20px;
			height: 30px;
			margin: 0;
		}


		.cart .listCart .item {
			display: grid;
			grid-template-columns: 50px 1fr 70px;
			align-items: center;
			gap: 20px;
			margin-bottom: 20px;
		}

		.cart .listCart img {
			width: 100%;
			height: 70px;
			object-fit: cover;
			border-radius: 10px;
		}

		.cart .listCart .item .name {
			font-weight: bold;
		}

		.cart .listCart .item .quantity {
			display: flex;
			justify-content: end;
			align-items: center;
		}

			.cart .listCart .item .quantity span {
				display: block;
				width: 50px;
				text-align: center;
			}

		.cart .listCart {
			padding: 20px;
			overflow: auto;
		}

			.cart .listCart::-webkit-scrollbar {
				width: 0;
			}

		.cart .buttons {
			display: grid;
			grid-template-columns: repeat(2, 1fr);
			text-align: center;
		}

			.cart .buttons div {
				background-color: #000;
				display: flex;
				justify-content: center;
				align-items: center;
				font-weight: bold;
				cursor: pointer;
			}

			.cart .buttons a {
				color: #fff;
				text-decoration: none;
			}

	.checkoutLayout {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 50px;
		padding: 20px;
	}

		.checkoutLayout .right {
			background-color: #5358B3;
			border-radius: 20px;
			padding: 40px;
			color: #fff;
		}

			.checkoutLayout .right .form {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 20px;
				border-bottom: 1px solid #7a7fe2;
				padding-bottom: 20px;
			}

		.checkoutLayout .form h1,
		.checkoutLayout .form .group:nth-child(-n+3) {
			grid-column-start: 1;
			grid-column-end: 3;
		}

		.checkoutLayout .form input,
		.checkoutLayout .form select {
			width: 100%;
			padding: 10px 20px;
			box-sizing: border-box;
			border-radius: 20px;
			margin-top: 10px;
			border: none;
			background-color: #6a6fc9;
			color: #fff;
		}

		.checkoutLayout .right .return .row {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-top: 10px;
		}

			.checkoutLayout .right .return .row div:nth-child(2) {
				font-weight: bold;
				font-size: x-large;
			}

	.buttonCheckout {
		width: 100%;
		height: 40px;
		border: none;
		border-radius: 20px;
		background-color: #49D8B9;
		margin-top: 20px;
		font-weight: bold;
		color: #fff;
	}

	.returnCart h1 {
		border-top: 1px solid #eee;
		padding: 20px 0;
	}

	.returnCart .list .item img {
		height: 80px;
	}

	.returnCart .list .item {
		display: grid;
		grid-template-columns: 80px 1fr 50px 80px;
		align-items: center;
		gap: 20px;
		margin-bottom: 30px;
		padding: 0 10px;
		box-shadow: 0 10px 20px #5555;
		border-radius: 20px;
	}

		.returnCart .list .item .name,
		.returnCart .list .item .returnPrice {
			font-size: large;
			font-weight: bold;
		}

</style>

@section Scripts {
	<script>
		// Select address ship
		function showStatesAdress() {
			var countryId = document.querySelector('.js_country_address').value;
			// Gửi yêu cầu AJAX để lấy danh sách các tỉnh/thành phố tương ứng
			$.ajax({
				type: "GET",
				url: "/Address/GetStates",
				data: { country_Id: countryId },
				success: function (response) {
					// Thêm nội dung modal vào DOM
					// Xóa tất cả các tùy chọn hiện có trong dropdown tỉnh/thành phố
					var stateDropdown = document.querySelector('.js_state_address');
					stateDropdown.addEventListener('change', () => {
						showCitiesAdress();
					})
					stateDropdown.innerHTML = '<option>Select state...</option>';

					// Thêm các tùy chọn mới từ danh sách các tỉnh/thành phố đã nhận được
					response.forEach(state => {
						var option = document.createElement('option');
						option.value = state.id;
						option.textContent = state.state_name;
						stateDropdown.appendChild(option);
					});
				},
				error: function (xhr, status, error) {
					// Xử lý lỗi nếu cần thiết
				}
			});
		}
		function showCitiesAdress() {
			var stateId = document.querySelector('.js_state_address').value;
			// Gửi yêu cầu AJAX để lấy danh sách các huyện/thành phố tương ứng với tỉnh
			$.ajax({
				type: "GET",
				url: "/Address/GetCities",
				data: { state_Id: stateId },
				success: function (response) {
					// Thêm nội dung modal vào DOM
					// Xóa tất cả các tùy chọn hiện có trong dropdown huyện
					var cityDropdown = document.querySelector('.js_city_address');
					cityDropdown.innerHTML = '<option>Select city...</option>';

					// Thêm các tùy chọn mới từ danh sách các huyện nhận được
					response.forEach(city => {
						var option = document.createElement('option');
						option.value = city.id;
						option.textContent = city.city_name;
						cityDropdown.appendChild(option);
					});
				},
				error: function (xhr, status, error) {
					// Xử lý lỗi nếu cần thiết
				}
			});

		}
	</script>
}
